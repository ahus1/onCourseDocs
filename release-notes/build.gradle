import groovyx.net.http.ContentType
import groovyx.net.http.RESTClient
import groovyx.net.http.HttpResponseException
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
  }
}

asciidoctor {
  sources {
    include '**/release-notes.adoc'
    exclude 'index.adoc'
  }
  attributes 'toc': null,
          'revnumber': null,
          'revdate': null,
          'stylesheet': '../css/oncourse.css'
}

task buildIndex(type: Copy) {
  def versions = file('src').listFiles().collect{it.name}.findAll{ it[0].isNumber() }
  versions.sort() { a, b ->

    List verA = a.tokenize('.')
    List verB = b.tokenize('.')

    def commonIndices = Math.min(verA.size(), verB.size())

    for (int i = 0; i < commonIndices; ++i) {
      def numA = verA[i] as int
      def numB = verB[i] as int
      if (numA != numB) {
        return numA <=> numB
      }
    }
    // If we got this far then all the common indices are identical, so whichever version is longer must be more recent
    verA.size() <=> verB.size()
  }

  from "src/index.adoc"
  into "${buildDir}/processed"
  filter(ReplaceTokens,tokens: [
          versions: versions.reverse().collect { "* link:./${it}/release-notes.html[Release ${it}]" }.join('\n'),
  ])
}

task outputIndex(type: org.asciidoctor.gradle.jvm.AsciidoctorTask, dependsOn: buildIndex) {
  doFirst {
    copy {
      from "${rootDir}/src"
      include "css/oncourse.css"
      into "${buildDir}/processed"
    }
  }
  baseDir "${buildDir}/processed"
  sourceDir baseDir
  sources {
    include 'index.adoc'
  }
  outputDir "${buildDir}/html"
  asciidoctorj {
    attributes 'stylesheet': 'css/oncourse.css'
  }
}
asciidoctor.dependsOn outputIndex

asciidoctor.doLast {
  copy {
    from "src"
    into "${buildDir}/html"
    exclude '**/*.adoc'
  }
}

// Run the following task to create new release notes from squish
// ./gradlew release-notes:releaseNotes -PreleaseVersion=1.1
task releaseNotes(type: ReleaseNotes) {
  if (project.hasProperty('releaseVersion')) {
  	version = releaseVersion
  }
  outputFile = new File(project.projectDir, "/src/${version}/release-notes.adoc")
}

class ReleaseNotes extends DefaultTask {
  @Input
  String version

  @OutputFile
  def outputFile

  @TaskAction
  def getNotes() {
    def issues = getJiraResponse("resolution in (closed,Unresolved) and fixVersion=${version}").issues as Collection

    logger.lifecycle "Found ${issues.size()} issues..."

    outputFile.parentFile.mkdirs()
    new File(outputFile.parentFile, "images").mkdirs()

    outputFile.append(createRelease(version, issues))
  }

  def getJiraResponse(jql) {
    // https://developer.atlassian.com/cloud/jira/platform/rest/
    def squish = new RESTClient('https://squish.ish.com.au', ContentType.JSON)
    // The following line is needed instead of squish.auth.basic since we need to pre-emptive auth
    squish.headers.'Authorization' = "Basic ${"gradle:7Am1*^X8A#ul".bytes.encodeBase64().toString()}"
    try {
      def response = squish.get(
              path: '/rest/api/2/search',
              query: [jql: jql, maxResults: '1000'])
      return response.data

    } catch (HttpResponseException e) {
      logger.error "*** Request to squish failed with error: ${e.response.data}"
    }
  }

  String createRelease(version, Collection issues) {
    issues.sort { issue -> issue.key }
    issues.each { issue ->
      logger.lifecycle issue.key + " " + issue.fields.summary
    }
    def issues_reports, issues_web, issues_angel
    def WEB_APPS = ['Web', 'Enrol', 'CMS', 'Portal', 'Search']
    (issues_web, issues_angel) = issues.split { issue -> issue.fields.components.any { WEB_APPS.contains(it.name) } }
    (issues_reports, issues_angel) = issues_angel.split { issue -> issue.fields.summary.contains('report') }

    def output = "= Release ${version}" + "\n"
    output += new Date().format('d MMM yyyy') + "\n"
    output += "\n"
    output += "== Important changes" + "\n"
    output += "\n"

    output += "== Major features" + "\n"
    output += "\n"

    output += "== Reports and scripts" + "\n"
    issues_reports.each { issue ->
      output += "* ${issue.fields.summary} `${issue.key}`" + "\n"
    }
    output += "\n"

    output += "== Minor features" + "\n"
    issues_angel.findAll { issue -> issue.fields.issuetype.name != "Defect" }.each { issue ->
      output += "* ${issue.fields.summary} `${issue.key}`" + "\n"
    }
    output += "\n"

    output += "== Fixes" + "\n"
    issues_angel.findAll { issue -> issue.fields.issuetype.name == "Defect" }.each { issue ->
      output += "* ${issue.fields.summary} `${issue.key}`" + "\n"
    }
    output += "\n"

    output += "== Web" + "\n"
    issues_web.findAll { issue -> issue.fields.issuetype.name != "Defect" }.each { issue ->
      output += "* ${issue.fields.summary} `${issue.key}`" + "\n"
    }
    output += "\n"

    output += "== Web fixes" + "\n"
    issues_web.findAll { issue -> issue.fields.issuetype.name == "Defect" }.each { issue ->
      output += "* ${issue.fields.summary} `${issue.key}`" + "\n"
    }
    output += "\n"

    return output
  }
}
