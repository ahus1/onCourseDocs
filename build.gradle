import org.apache.tools.ant.filters.ReplaceTokens
import java.time.LocalDate
import java.time.format.DateTimeFormatter

plugins {
    id 'com.github.ben-manes.versions' version '0.28.0' // adds the task 'dependencyUpdates'
    id 'com.dorongold.task-tree' version '1.5' // adds the task 'taskTree [some task]'
    id 'distribution'
    id 'maven-publish'
    id 'org.asciidoctor.jvm.convert' version '3.2.0'
}

repositories {
    jcenter()
}

subprojects {
    apply plugin: 'distribution'
    apply plugin: 'maven-publish'
    apply plugin: 'org.asciidoctor.jvm.convert'

    group = 'ish.oncourse.docs'
    version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'SNAPSHOT'

    // bug https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/559
    repositories {
        jcenter()
    }

    asciidoctor {
        logDocuments true
        baseDir "${projectDir}/src"
        sourceDir baseDir
        sources {
            include 'index.adoc'
        }
        outputDir "${buildDir}/html"
        options doctype: 'book'
        attributes  'source-highlighter': 'coderay',
                    'linkcss': '',
                    'toc': 'left',
                    'toc-title': "",
                    'sectnums': 'all',
                    'sectnumlevels': 2,
                    'partnums': true,
                    'icons': 'font',
                    'docinfo': 'shared',
                    'docinfodir': "${rootDir}/src",
                    'stylesheet': development == "false" ? "${documentPath}/${project.name}/css/oncourse.css" : './css/oncourse.css',
                    'revnumber': project.version,
                    'revdate': LocalDate.now().format(DateTimeFormatter.ofPattern("d MMM yyyy"))
        resources {
            from(sourceDir) {
                include 'images/**'
            }
            from("${rootDir}/src") {
                include "css/oncourse.css"
                include "js/**"
                include 'images/**'
            }
        }
    }

    distributions {
        html {
            contents {
                from "${buildDir}/html"
            }
        }
    }
    distTar.enabled = false
    htmlDistZip.dependsOn asciidoctor

    publishing {
        publications {
            html(MavenPublication) {
                artifact htmlDistZip {
                    archiveName "${project.name}.zip"
                }
            }
        }
        repositories {
            maven {
                name "snapshots"
                url "https://repo.ish.com.au/content/repositories/ish-snapshots"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            maven {
                name "releases"
                url "https://repo.ish.com.au/content/repositories/ish-releases"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }

    // this task should be periodically run manually to optimise files in the source folders
    task optimise {
        description = "Optimise all the images"

        // both ImageMagick and optipng need to be installed
        doLast {
            fileTree("src").matching{ include '**/*.png' }.each{ f ->
                new ByteArrayOutputStream().withStream { resolution ->
                    exec {
                        commandLine = 'magick'
                        standardOutput = resolution
                        args = ['identify', '-format', '%x', f.absolutePath]
                    }
                    if (resolution?.toString()?.isInteger() && resolution.toString() as Integer != 72) {
                        logger.warn('Found image {} which has resolution {}. Resizing now.', f.absolutePath, resolution.toString())
                        exec {
                            commandLine = 'convert'
                            args = [f.absolutePath, '-strip', '-units' ,'PixelsPerInch', '-resample', '72', f.absolutePath]
                        }
                    }
                }
                exec {
                    commandLine = 'optipng'
                    args = ['-fix', '-strip all', f.absolutePath]
                }
            }
        }
    }
}

// Skip beta and other non-final releases in the update report
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'ea'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
